-- This file is automatically generated! Don't edit this file, but
-- instead modify the included IDL parser and PureScript generator.

module Graphics.WebGL.Raw
( activeTexture
, attachShader
, bindAttribLocation
, bindBuffer
, bindFramebuffer
, bindRenderbuffer
, bindTexture
, blendColor
, blendEquation
, blendEquationSeparate
, blendFunc
, blendFuncSeparate
, bufferData
, bufferData_
, bufferSubData
, checkFramebufferStatus
, clear
, clearColor
, clearDepth
, clearStencil
, colorMask
, compileShader
, compressedTexImage2D
, compressedTexSubImage2D
, copyTexImage2D
, copyTexSubImage2D
, createBuffer
, createFramebuffer
, createProgram
, createRenderbuffer
, createShader
, createTexture
, cullFace
, deleteBuffer
, deleteFramebuffer
, deleteProgram
, deleteRenderbuffer
, deleteShader
, deleteTexture
, depthFunc
, depthMask
, depthRange
, detachShader
, disable
, disableVertexAttribArray
, drawArrays
, drawElements
, enable
, enableVertexAttribArray
, finish
, flush
, framebufferRenderbuffer
, framebufferTexture2D
, frontFace
, generateMipmap
, getActiveAttrib
, getActiveUniform
, getAttachedShaders
, getAttribLocation
, getBufferParameter
, getContextAttributes
, getError
, getExtension
, getFramebufferAttachmentParameter
, getParameter
, getProgramInfoLog
, getProgramParameter
, getRenderbufferParameter
, getShaderInfoLog
, getShaderParameter
, getShaderPrecisionFormat
, getShaderSource
, getSupportedExtensions
, getTexParameter
, getUniform
, getUniformLocation
, getVertexAttrib
, getVertexAttribOffset
, hint
, isBuffer
, isContextLost
, isEnabled
, isFramebuffer
, isProgram
, isRenderbuffer
, isShader
, isTexture
, lineWidth
, linkProgram
, pixelStorei
, polygonOffset
, readPixels
, renderbufferStorage
, sampleCoverage
, scissor
, shaderSource
, stencilFunc
, stencilFuncSeparate
, stencilMask
, stencilMaskSeparate
, stencilOp
, stencilOpSeparate
, texImage2D
, texImage2D_
, texParameterf
, texParameteri
, texSubImage2D
, texSubImage2D_
, uniform1f
, uniform1fv
, uniform1fv_
, uniform1i
, uniform1iv
, uniform1iv_
, uniform2f
, uniform2fv
, uniform2fv_
, uniform2i
, uniform2iv
, uniform2iv_
, uniform3f
, uniform3fv
, uniform3fv_
, uniform3i
, uniform3iv
, uniform3iv_
, uniform4f
, uniform4fv
, uniform4fv_
, uniform4i
, uniform4iv
, uniform4iv_
, uniformMatrix2fv
, uniformMatrix2fv_
, uniformMatrix3fv
, uniformMatrix3fv_
, uniformMatrix4fv
, uniformMatrix4fv_
, useProgram
, validateProgram
, vertexAttrib1f
, vertexAttrib1fv
, vertexAttrib1fv_
, vertexAttrib2f
, vertexAttrib2fv
, vertexAttrib2fv_
, vertexAttrib3f
, vertexAttrib3fv
, vertexAttrib3fv_
, vertexAttrib4f
, vertexAttrib4fv
, vertexAttrib4fv_
, vertexAttribPointer
, viewport
) where

import Data.Maybe (Maybe ())
import Graphics.Canvas (Canvas ())

import Control.Monad.Eff
import Data.ArrayBuffer.Types
import Data.Function
import Graphics.WebGL.Raw.Types
import Graphics.WebGL.Raw.Util

foreign import activeTextureImpl """
  function activeTextureImpl(webgl, texture) {
    return function () {
      return webgl.activeTexture(texture);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) Unit)

activeTexture :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) Unit
activeTexture webgl texture = runFn2 activeTextureImpl webgl texture

foreign import attachShaderImpl """
  function attachShaderImpl(webgl, program, shader) {
    return function () {
      return webgl.attachShader(program, shader);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram WebGLShader (Eff (canvas :: Canvas | eff) Unit)

attachShader :: forall eff. WebGLContext -> WebGLProgram -> WebGLShader -> Eff (canvas :: Canvas | eff) Unit
attachShader webgl program shader = runFn3 attachShaderImpl webgl program shader

foreign import bindAttribLocationImpl """
  function bindAttribLocationImpl(webgl, program, index, name) {
    return function () {
      return webgl.bindAttribLocation(program, index, name);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLProgram GLuint DOMString (Eff (canvas :: Canvas | eff) Unit)

bindAttribLocation :: forall eff. WebGLContext -> WebGLProgram -> GLuint -> DOMString -> Eff (canvas :: Canvas | eff) Unit
bindAttribLocation webgl program index name = runFn4 bindAttribLocationImpl webgl program index name

foreign import bindBufferImpl """
  function bindBufferImpl(webgl, target, buffer) {
    return function () {
      return webgl.bindBuffer(target, buffer);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum WebGLBuffer (Eff (canvas :: Canvas | eff) Unit)

bindBuffer :: forall eff. WebGLContext -> GLenum -> WebGLBuffer -> Eff (canvas :: Canvas | eff) Unit
bindBuffer webgl target buffer = runFn3 bindBufferImpl webgl target buffer

foreign import bindFramebufferImpl """
  function bindFramebufferImpl(webgl, target, framebuffer) {
    return function () {
      return webgl.bindFramebuffer(target, framebuffer);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum WebGLFramebuffer (Eff (canvas :: Canvas | eff) Unit)

bindFramebuffer :: forall eff. WebGLContext -> GLenum -> WebGLFramebuffer -> Eff (canvas :: Canvas | eff) Unit
bindFramebuffer webgl target framebuffer = runFn3 bindFramebufferImpl webgl target framebuffer

foreign import bindRenderbufferImpl """
  function bindRenderbufferImpl(webgl, target, renderbuffer) {
    return function () {
      return webgl.bindRenderbuffer(target, renderbuffer);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum WebGLRenderbuffer (Eff (canvas :: Canvas | eff) Unit)

bindRenderbuffer :: forall eff. WebGLContext -> GLenum -> WebGLRenderbuffer -> Eff (canvas :: Canvas | eff) Unit
bindRenderbuffer webgl target renderbuffer = runFn3 bindRenderbufferImpl webgl target renderbuffer

foreign import bindTextureImpl """
  function bindTextureImpl(webgl, target, texture) {
    return function () {
      return webgl.bindTexture(target, texture);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum WebGLTexture (Eff (canvas :: Canvas | eff) Unit)

bindTexture :: forall eff. WebGLContext -> GLenum -> WebGLTexture -> Eff (canvas :: Canvas | eff) Unit
bindTexture webgl target texture = runFn3 bindTextureImpl webgl target texture

foreign import blendColorImpl """
  function blendColorImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.blendColor(red, green, blue, alpha);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLclampf GLclampf GLclampf GLclampf (Eff (canvas :: Canvas | eff) Unit)

blendColor :: forall eff. WebGLContext -> GLclampf -> GLclampf -> GLclampf -> GLclampf -> Eff (canvas :: Canvas | eff) Unit
blendColor webgl red green blue alpha = runFn5 blendColorImpl webgl red green blue alpha

foreign import blendEquationImpl """
  function blendEquationImpl(webgl, mode) {
    return function () {
      return webgl.blendEquation(mode);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) Unit)

blendEquation :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) Unit
blendEquation webgl mode = runFn2 blendEquationImpl webgl mode

foreign import blendEquationSeparateImpl """
  function blendEquationSeparateImpl(webgl, modeRGB, modeAlpha) {
    return function () {
      return webgl.blendEquationSeparate(modeRGB, modeAlpha);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas | eff) Unit)

blendEquationSeparate :: forall eff. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) Unit
blendEquationSeparate webgl modeRGB modeAlpha = runFn3 blendEquationSeparateImpl webgl modeRGB modeAlpha

foreign import blendFuncImpl """
  function blendFuncImpl(webgl, sfactor, dfactor) {
    return function () {
      return webgl.blendFunc(sfactor, dfactor);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas | eff) Unit)

blendFunc :: forall eff. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) Unit
blendFunc webgl sfactor dfactor = runFn3 blendFuncImpl webgl sfactor dfactor

foreign import blendFuncSeparateImpl """
  function blendFuncSeparateImpl(webgl, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    return function () {
      return webgl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLenum GLenum (Eff (canvas :: Canvas | eff) Unit)

blendFuncSeparate :: forall eff. WebGLContext -> GLenum -> GLenum -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) Unit
blendFuncSeparate webgl srcRGB dstRGB srcAlpha dstAlpha = runFn5 blendFuncSeparateImpl webgl srcRGB dstRGB srcAlpha dstAlpha

foreign import bufferDataImpl """
  function bufferDataImpl(webgl, target, data, usage) {
    return function () {
      return webgl.bufferData(target, data, usage);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum BufferDataSource GLenum (Eff (canvas :: Canvas | eff) Unit)

bufferData :: forall eff. WebGLContext -> GLenum -> BufferDataSource -> GLenum -> Eff (canvas :: Canvas | eff) Unit
bufferData webgl target data' usage = runFn4 bufferDataImpl webgl target data' usage

foreign import bufferData_Impl """
  function bufferData_Impl(webgl, target, size, usage) {
    return function () {
      return webgl.bufferData(target, size, usage);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLsizeiptr GLenum (Eff (canvas :: Canvas | eff) Unit)

bufferData_ :: forall eff. WebGLContext -> GLenum -> GLsizeiptr -> GLenum -> Eff (canvas :: Canvas | eff) Unit
bufferData_ webgl target size usage = runFn4 bufferData_Impl webgl target size usage

foreign import bufferSubDataImpl """
  function bufferSubDataImpl(webgl, target, offset, data) {
    return function () {
      return webgl.bufferSubData(target, offset, data);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLintptr BufferDataSource (Eff (canvas :: Canvas | eff) Unit)

bufferSubData :: forall eff. WebGLContext -> GLenum -> GLintptr -> BufferDataSource -> Eff (canvas :: Canvas | eff) Unit
bufferSubData webgl target offset data' = runFn4 bufferSubDataImpl webgl target offset data'

foreign import checkFramebufferStatusImpl """
  function checkFramebufferStatusImpl(webgl, target) {
    return function () {
      return webgl.checkFramebufferStatus(target);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) GLenum)

checkFramebufferStatus :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) GLenum
checkFramebufferStatus webgl target = runFn2 checkFramebufferStatusImpl webgl target

foreign import clearImpl """
  function clearImpl(webgl, mask) {
    return function () {
      return webgl.clear(mask);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLbitfield (Eff (canvas :: Canvas | eff) Unit)

clear :: forall eff. WebGLContext -> GLbitfield -> Eff (canvas :: Canvas | eff) Unit
clear webgl mask = runFn2 clearImpl webgl mask

foreign import clearColorImpl """
  function clearColorImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.clearColor(red, green, blue, alpha);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLclampf GLclampf GLclampf GLclampf (Eff (canvas :: Canvas | eff) Unit)

clearColor :: forall eff. WebGLContext -> GLclampf -> GLclampf -> GLclampf -> GLclampf -> Eff (canvas :: Canvas | eff) Unit
clearColor webgl red green blue alpha = runFn5 clearColorImpl webgl red green blue alpha

foreign import clearDepthImpl """
  function clearDepthImpl(webgl, depth) {
    return function () {
      return webgl.clearDepth(depth);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLclampf (Eff (canvas :: Canvas | eff) Unit)

clearDepth :: forall eff. WebGLContext -> GLclampf -> Eff (canvas :: Canvas | eff) Unit
clearDepth webgl depth = runFn2 clearDepthImpl webgl depth

foreign import clearStencilImpl """
  function clearStencilImpl(webgl, s) {
    return function () {
      return webgl.clearStencil(s);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLint (Eff (canvas :: Canvas | eff) Unit)

clearStencil :: forall eff. WebGLContext -> GLint -> Eff (canvas :: Canvas | eff) Unit
clearStencil webgl s = runFn2 clearStencilImpl webgl s

foreign import colorMaskImpl """
  function colorMaskImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.colorMask(red, green, blue, alpha);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLboolean GLboolean GLboolean GLboolean (Eff (canvas :: Canvas | eff) Unit)

colorMask :: forall eff. WebGLContext -> GLboolean -> GLboolean -> GLboolean -> GLboolean -> Eff (canvas :: Canvas | eff) Unit
colorMask webgl red green blue alpha = runFn5 colorMaskImpl webgl red green blue alpha

foreign import compileShaderImpl """
  function compileShaderImpl(webgl, shader) {
    return function () {
      return webgl.compileShader(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas | eff) Unit)

compileShader :: forall eff. WebGLContext -> WebGLShader -> Eff (canvas :: Canvas | eff) Unit
compileShader webgl shader = runFn2 compileShaderImpl webgl shader

foreign import compressedTexImage2DImpl """
  function compressedTexImage2DImpl(webgl, target, level, internalformat, width, height, border, data) {
    return function () {
      return webgl.compressedTexImage2D(target, level, internalformat, width, height, border, data);
    };
  }
""" :: forall eff. Fn8 WebGLContext GLenum GLint GLenum GLsizei GLsizei GLint ArrayBufferView (Eff (canvas :: Canvas | eff) Unit)

compressedTexImage2D :: forall eff. WebGLContext -> GLenum -> GLint -> GLenum -> GLsizei -> GLsizei -> GLint -> ArrayBufferView -> Eff (canvas :: Canvas | eff) Unit
compressedTexImage2D webgl target level internalformat width height border data' = runFn8 compressedTexImage2DImpl webgl target level internalformat width height border data'

foreign import compressedTexSubImage2DImpl """
  function compressedTexSubImage2DImpl(webgl, target, level, xoffset, yoffset, width, height, format, data) {
    return function () {
      return webgl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data);
    };
  }
""" :: forall eff. Fn9 WebGLContext GLenum GLint GLint GLint GLsizei GLsizei GLenum ArrayBufferView (Eff (canvas :: Canvas | eff) Unit)

compressedTexSubImage2D :: forall eff. WebGLContext -> GLenum -> GLint -> GLint -> GLint -> GLsizei -> GLsizei -> GLenum -> ArrayBufferView -> Eff (canvas :: Canvas | eff) Unit
compressedTexSubImage2D webgl target level xoffset yoffset width height format data' = runFn9 compressedTexSubImage2DImpl webgl target level xoffset yoffset width height format data'

foreign import copyTexImage2DImpl """
  function copyTexImage2DImpl(webgl, target, level, internalformat, x, y, width, height, border) {
    return function () {
      return webgl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);
    };
  }
""" :: forall eff. Fn9 WebGLContext GLenum GLint GLenum GLint GLint GLsizei GLsizei GLint (Eff (canvas :: Canvas | eff) Unit)

copyTexImage2D :: forall eff. WebGLContext -> GLenum -> GLint -> GLenum -> GLint -> GLint -> GLsizei -> GLsizei -> GLint -> Eff (canvas :: Canvas | eff) Unit
copyTexImage2D webgl target level internalformat x y width height border = runFn9 copyTexImage2DImpl webgl target level internalformat x y width height border

foreign import copyTexSubImage2DImpl """
  function copyTexSubImage2DImpl(webgl, target, level, xoffset, yoffset, x, y, width, height) {
    return function () {
      return webgl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    };
  }
""" :: forall eff. Fn9 WebGLContext GLenum GLint GLint GLint GLint GLint GLsizei GLsizei (Eff (canvas :: Canvas | eff) Unit)

copyTexSubImage2D :: forall eff. WebGLContext -> GLenum -> GLint -> GLint -> GLint -> GLint -> GLint -> GLsizei -> GLsizei -> Eff (canvas :: Canvas | eff) Unit
copyTexSubImage2D webgl target level xoffset yoffset x y width height = runFn9 copyTexSubImage2DImpl webgl target level xoffset yoffset x y width height

foreign import createBufferImpl """
  function createBufferImpl(webgl) {
    return function () {
      return webgl.createBuffer();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) WebGLBuffer)

createBuffer :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) (Maybe WebGLBuffer)
createBuffer webgl = runFn1 createBufferImpl webgl >>= toMaybe >>> return

foreign import createFramebufferImpl """
  function createFramebufferImpl(webgl) {
    return function () {
      return webgl.createFramebuffer();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) WebGLFramebuffer)

createFramebuffer :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) (Maybe WebGLFramebuffer)
createFramebuffer webgl = runFn1 createFramebufferImpl webgl >>= toMaybe >>> return

foreign import createProgramImpl """
  function createProgramImpl(webgl) {
    return function () {
      return webgl.createProgram();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) WebGLProgram)

createProgram :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) (Maybe WebGLProgram)
createProgram webgl = runFn1 createProgramImpl webgl >>= toMaybe >>> return

foreign import createRenderbufferImpl """
  function createRenderbufferImpl(webgl) {
    return function () {
      return webgl.createRenderbuffer();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) WebGLRenderbuffer)

createRenderbuffer :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) (Maybe WebGLRenderbuffer)
createRenderbuffer webgl = runFn1 createRenderbufferImpl webgl >>= toMaybe >>> return

foreign import createShaderImpl """
  function createShaderImpl(webgl, type) {
    return function () {
      return webgl.createShader(type);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) WebGLShader)

createShader :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe WebGLShader)
createShader webgl type' = runFn2 createShaderImpl webgl type' >>= toMaybe >>> return

foreign import createTextureImpl """
  function createTextureImpl(webgl) {
    return function () {
      return webgl.createTexture();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) WebGLTexture)

createTexture :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) (Maybe WebGLTexture)
createTexture webgl = runFn1 createTextureImpl webgl >>= toMaybe >>> return

foreign import cullFaceImpl """
  function cullFaceImpl(webgl, mode) {
    return function () {
      return webgl.cullFace(mode);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) Unit)

cullFace :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) Unit
cullFace webgl mode = runFn2 cullFaceImpl webgl mode

foreign import deleteBufferImpl """
  function deleteBufferImpl(webgl, buffer) {
    return function () {
      return webgl.deleteBuffer(buffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLBuffer (Eff (canvas :: Canvas | eff) Unit)

deleteBuffer :: forall eff. WebGLContext -> WebGLBuffer -> Eff (canvas :: Canvas | eff) Unit
deleteBuffer webgl buffer = runFn2 deleteBufferImpl webgl buffer

foreign import deleteFramebufferImpl """
  function deleteFramebufferImpl(webgl, framebuffer) {
    return function () {
      return webgl.deleteFramebuffer(framebuffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLFramebuffer (Eff (canvas :: Canvas | eff) Unit)

deleteFramebuffer :: forall eff. WebGLContext -> WebGLFramebuffer -> Eff (canvas :: Canvas | eff) Unit
deleteFramebuffer webgl framebuffer = runFn2 deleteFramebufferImpl webgl framebuffer

foreign import deleteProgramImpl """
  function deleteProgramImpl(webgl, program) {
    return function () {
      return webgl.deleteProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas | eff) Unit)

deleteProgram :: forall eff. WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas | eff) Unit
deleteProgram webgl program = runFn2 deleteProgramImpl webgl program

foreign import deleteRenderbufferImpl """
  function deleteRenderbufferImpl(webgl, renderbuffer) {
    return function () {
      return webgl.deleteRenderbuffer(renderbuffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLRenderbuffer (Eff (canvas :: Canvas | eff) Unit)

deleteRenderbuffer :: forall eff. WebGLContext -> WebGLRenderbuffer -> Eff (canvas :: Canvas | eff) Unit
deleteRenderbuffer webgl renderbuffer = runFn2 deleteRenderbufferImpl webgl renderbuffer

foreign import deleteShaderImpl """
  function deleteShaderImpl(webgl, shader) {
    return function () {
      return webgl.deleteShader(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas | eff) Unit)

deleteShader :: forall eff. WebGLContext -> WebGLShader -> Eff (canvas :: Canvas | eff) Unit
deleteShader webgl shader = runFn2 deleteShaderImpl webgl shader

foreign import deleteTextureImpl """
  function deleteTextureImpl(webgl, texture) {
    return function () {
      return webgl.deleteTexture(texture);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLTexture (Eff (canvas :: Canvas | eff) Unit)

deleteTexture :: forall eff. WebGLContext -> WebGLTexture -> Eff (canvas :: Canvas | eff) Unit
deleteTexture webgl texture = runFn2 deleteTextureImpl webgl texture

foreign import depthFuncImpl """
  function depthFuncImpl(webgl, func) {
    return function () {
      return webgl.depthFunc(func);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) Unit)

depthFunc :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) Unit
depthFunc webgl func = runFn2 depthFuncImpl webgl func

foreign import depthMaskImpl """
  function depthMaskImpl(webgl, flag) {
    return function () {
      return webgl.depthMask(flag);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLboolean (Eff (canvas :: Canvas | eff) Unit)

depthMask :: forall eff. WebGLContext -> GLboolean -> Eff (canvas :: Canvas | eff) Unit
depthMask webgl flag = runFn2 depthMaskImpl webgl flag

foreign import depthRangeImpl """
  function depthRangeImpl(webgl, zNear, zFar) {
    return function () {
      return webgl.depthRange(zNear, zFar);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLclampf GLclampf (Eff (canvas :: Canvas | eff) Unit)

depthRange :: forall eff. WebGLContext -> GLclampf -> GLclampf -> Eff (canvas :: Canvas | eff) Unit
depthRange webgl zNear zFar = runFn3 depthRangeImpl webgl zNear zFar

foreign import detachShaderImpl """
  function detachShaderImpl(webgl, program, shader) {
    return function () {
      return webgl.detachShader(program, shader);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram WebGLShader (Eff (canvas :: Canvas | eff) Unit)

detachShader :: forall eff. WebGLContext -> WebGLProgram -> WebGLShader -> Eff (canvas :: Canvas | eff) Unit
detachShader webgl program shader = runFn3 detachShaderImpl webgl program shader

foreign import disableImpl """
  function disableImpl(webgl, cap) {
    return function () {
      return webgl.disable(cap);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) Unit)

disable :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) Unit
disable webgl cap = runFn2 disableImpl webgl cap

foreign import disableVertexAttribArrayImpl """
  function disableVertexAttribArrayImpl(webgl, index) {
    return function () {
      return webgl.disableVertexAttribArray(index);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLuint (Eff (canvas :: Canvas | eff) Unit)

disableVertexAttribArray :: forall eff. WebGLContext -> GLuint -> Eff (canvas :: Canvas | eff) Unit
disableVertexAttribArray webgl index = runFn2 disableVertexAttribArrayImpl webgl index

foreign import drawArraysImpl """
  function drawArraysImpl(webgl, mode, first, count) {
    return function () {
      return webgl.drawArrays(mode, first, count);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLint GLsizei (Eff (canvas :: Canvas | eff) Unit)

drawArrays :: forall eff. WebGLContext -> GLenum -> GLint -> GLsizei -> Eff (canvas :: Canvas | eff) Unit
drawArrays webgl mode first count = runFn4 drawArraysImpl webgl mode first count

foreign import drawElementsImpl """
  function drawElementsImpl(webgl, mode, count, type, offset) {
    return function () {
      return webgl.drawElements(mode, count, type, offset);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLsizei GLenum GLintptr (Eff (canvas :: Canvas | eff) Unit)

drawElements :: forall eff. WebGLContext -> GLenum -> GLsizei -> GLenum -> GLintptr -> Eff (canvas :: Canvas | eff) Unit
drawElements webgl mode count type' offset = runFn5 drawElementsImpl webgl mode count type' offset

foreign import enableImpl """
  function enableImpl(webgl, cap) {
    return function () {
      return webgl.enable(cap);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) Unit)

enable :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) Unit
enable webgl cap = runFn2 enableImpl webgl cap

foreign import enableVertexAttribArrayImpl """
  function enableVertexAttribArrayImpl(webgl, index) {
    return function () {
      return webgl.enableVertexAttribArray(index);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLuint (Eff (canvas :: Canvas | eff) Unit)

enableVertexAttribArray :: forall eff. WebGLContext -> GLuint -> Eff (canvas :: Canvas | eff) Unit
enableVertexAttribArray webgl index = runFn2 enableVertexAttribArrayImpl webgl index

foreign import finishImpl """
  function finishImpl(webgl) {
    return function () {
      return webgl.finish();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) Unit)

finish :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) Unit
finish webgl = runFn1 finishImpl webgl

foreign import flushImpl """
  function flushImpl(webgl) {
    return function () {
      return webgl.flush();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) Unit)

flush :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) Unit
flush webgl = runFn1 flushImpl webgl

foreign import framebufferRenderbufferImpl """
  function framebufferRenderbufferImpl(webgl, target, attachment, renderbuffertarget, renderbuffer) {
    return function () {
      return webgl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLenum WebGLRenderbuffer (Eff (canvas :: Canvas | eff) Unit)

framebufferRenderbuffer :: forall eff. WebGLContext -> GLenum -> GLenum -> GLenum -> WebGLRenderbuffer -> Eff (canvas :: Canvas | eff) Unit
framebufferRenderbuffer webgl target attachment renderbuffertarget renderbuffer = runFn5 framebufferRenderbufferImpl webgl target attachment renderbuffertarget renderbuffer

foreign import framebufferTexture2DImpl """
  function framebufferTexture2DImpl(webgl, target, attachment, textarget, texture, level) {
    return function () {
      return webgl.framebufferTexture2D(target, attachment, textarget, texture, level);
    };
  }
""" :: forall eff. Fn6 WebGLContext GLenum GLenum GLenum WebGLTexture GLint (Eff (canvas :: Canvas | eff) Unit)

framebufferTexture2D :: forall eff. WebGLContext -> GLenum -> GLenum -> GLenum -> WebGLTexture -> GLint -> Eff (canvas :: Canvas | eff) Unit
framebufferTexture2D webgl target attachment textarget texture level = runFn6 framebufferTexture2DImpl webgl target attachment textarget texture level

foreign import frontFaceImpl """
  function frontFaceImpl(webgl, mode) {
    return function () {
      return webgl.frontFace(mode);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) Unit)

frontFace :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) Unit
frontFace webgl mode = runFn2 frontFaceImpl webgl mode

foreign import generateMipmapImpl """
  function generateMipmapImpl(webgl, target) {
    return function () {
      return webgl.generateMipmap(target);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) Unit)

generateMipmap :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) Unit
generateMipmap webgl target = runFn2 generateMipmapImpl webgl target

foreign import getActiveAttribImpl """
  function getActiveAttribImpl(webgl, program, index) {
    return function () {
      return webgl.getActiveAttrib(program, index);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram GLuint (Eff (canvas :: Canvas | eff) WebGLActiveInfo)

getActiveAttrib :: forall eff. WebGLContext -> WebGLProgram -> GLuint -> Eff (canvas :: Canvas | eff) (Maybe WebGLActiveInfo)
getActiveAttrib webgl program index = runFn3 getActiveAttribImpl webgl program index >>= toMaybe >>> return

foreign import getActiveUniformImpl """
  function getActiveUniformImpl(webgl, program, index) {
    return function () {
      return webgl.getActiveUniform(program, index);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram GLuint (Eff (canvas :: Canvas | eff) WebGLActiveInfo)

getActiveUniform :: forall eff. WebGLContext -> WebGLProgram -> GLuint -> Eff (canvas :: Canvas | eff) (Maybe WebGLActiveInfo)
getActiveUniform webgl program index = runFn3 getActiveUniformImpl webgl program index >>= toMaybe >>> return

foreign import getAttachedShadersImpl """
  function getAttachedShadersImpl(webgl, program) {
    return function () {
      return webgl.getAttachedShaders(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas | eff) [WebGLShader])

getAttachedShaders :: forall eff. WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas | eff) [WebGLShader]
getAttachedShaders webgl program = runFn2 getAttachedShadersImpl webgl program >>= nullAsEmpty >>> return

foreign import getAttribLocationImpl """
  function getAttribLocationImpl(webgl, program, name) {
    return function () {
      return webgl.getAttribLocation(program, name);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram DOMString (Eff (canvas :: Canvas | eff) GLint)

getAttribLocation :: forall eff. WebGLContext -> WebGLProgram -> DOMString -> Eff (canvas :: Canvas | eff) GLint
getAttribLocation webgl program name = runFn3 getAttribLocationImpl webgl program name

foreign import getBufferParameterImpl """
  function getBufferParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getBufferParameter(target, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas | eff) a)

getBufferParameter :: forall eff a. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe a)
getBufferParameter webgl target pname = runFn3 getBufferParameterImpl webgl target pname >>= toMaybe >>> return

foreign import getContextAttributesImpl """
  function getContextAttributesImpl(webgl) {
    return function () {
      return webgl.getContextAttributes();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) WebGLContextAttributes)

getContextAttributes :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) (Maybe WebGLContextAttributes)
getContextAttributes webgl = runFn1 getContextAttributesImpl webgl >>= toMaybe >>> return

foreign import getErrorImpl """
  function getErrorImpl(webgl) {
    return function () {
      return webgl.getError();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) GLenum)

getError :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) GLenum
getError webgl = runFn1 getErrorImpl webgl

foreign import getExtensionImpl """
  function getExtensionImpl(webgl, name) {
    return function () {
      return webgl.getExtension(name);
    };
  }
""" :: forall eff a. Fn2 WebGLContext DOMString (Eff (canvas :: Canvas | eff) a)

getExtension :: forall eff a. WebGLContext -> DOMString -> Eff (canvas :: Canvas | eff) (Maybe a)
getExtension webgl name = runFn2 getExtensionImpl webgl name >>= toMaybe >>> return

foreign import getFramebufferAttachmentParameterImpl """
  function getFramebufferAttachmentParameterImpl(webgl, target, attachment, pname) {
    return function () {
      return webgl.getFramebufferAttachmentParameter(target, attachment, pname);
    };
  }
""" :: forall eff a. Fn4 WebGLContext GLenum GLenum GLenum (Eff (canvas :: Canvas | eff) a)

getFramebufferAttachmentParameter :: forall eff a. WebGLContext -> GLenum -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe a)
getFramebufferAttachmentParameter webgl target attachment pname = runFn4 getFramebufferAttachmentParameterImpl webgl target attachment pname >>= toMaybe >>> return

foreign import getParameterImpl """
  function getParameterImpl(webgl, pname) {
    return function () {
      return webgl.getParameter(pname);
    };
  }
""" :: forall eff a. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) a)

getParameter :: forall eff a. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe a)
getParameter webgl pname = runFn2 getParameterImpl webgl pname >>= toMaybe >>> return

foreign import getProgramInfoLogImpl """
  function getProgramInfoLogImpl(webgl, program) {
    return function () {
      return webgl.getProgramInfoLog(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas | eff) DOMString)

getProgramInfoLog :: forall eff. WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas | eff) (Maybe DOMString)
getProgramInfoLog webgl program = runFn2 getProgramInfoLogImpl webgl program >>= toMaybe >>> return

foreign import getProgramParameterImpl """
  function getProgramParameterImpl(webgl, program, pname) {
    return function () {
      return webgl.getProgramParameter(program, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext WebGLProgram GLenum (Eff (canvas :: Canvas | eff) a)

getProgramParameter :: forall eff a. WebGLContext -> WebGLProgram -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe a)
getProgramParameter webgl program pname = runFn3 getProgramParameterImpl webgl program pname >>= toMaybe >>> return

foreign import getRenderbufferParameterImpl """
  function getRenderbufferParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getRenderbufferParameter(target, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas | eff) a)

getRenderbufferParameter :: forall eff a. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe a)
getRenderbufferParameter webgl target pname = runFn3 getRenderbufferParameterImpl webgl target pname >>= toMaybe >>> return

foreign import getShaderInfoLogImpl """
  function getShaderInfoLogImpl(webgl, shader) {
    return function () {
      return webgl.getShaderInfoLog(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas | eff) DOMString)

getShaderInfoLog :: forall eff. WebGLContext -> WebGLShader -> Eff (canvas :: Canvas | eff) (Maybe DOMString)
getShaderInfoLog webgl shader = runFn2 getShaderInfoLogImpl webgl shader >>= toMaybe >>> return

foreign import getShaderParameterImpl """
  function getShaderParameterImpl(webgl, shader, pname) {
    return function () {
      return webgl.getShaderParameter(shader, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext WebGLShader GLenum (Eff (canvas :: Canvas | eff) a)

getShaderParameter :: forall eff a. WebGLContext -> WebGLShader -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe a)
getShaderParameter webgl shader pname = runFn3 getShaderParameterImpl webgl shader pname >>= toMaybe >>> return

foreign import getShaderPrecisionFormatImpl """
  function getShaderPrecisionFormatImpl(webgl, shadertype, precisiontype) {
    return function () {
      return webgl.getShaderPrecisionFormat(shadertype, precisiontype);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas | eff) WebGLShaderPrecisionFormat)

getShaderPrecisionFormat :: forall eff. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe WebGLShaderPrecisionFormat)
getShaderPrecisionFormat webgl shadertype precisiontype = runFn3 getShaderPrecisionFormatImpl webgl shadertype precisiontype >>= toMaybe >>> return

foreign import getShaderSourceImpl """
  function getShaderSourceImpl(webgl, shader) {
    return function () {
      return webgl.getShaderSource(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas | eff) DOMString)

getShaderSource :: forall eff. WebGLContext -> WebGLShader -> Eff (canvas :: Canvas | eff) (Maybe DOMString)
getShaderSource webgl shader = runFn2 getShaderSourceImpl webgl shader >>= toMaybe >>> return

foreign import getSupportedExtensionsImpl """
  function getSupportedExtensionsImpl(webgl) {
    return function () {
      return webgl.getSupportedExtensions();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) [DOMString])

getSupportedExtensions :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) [DOMString]
getSupportedExtensions webgl = runFn1 getSupportedExtensionsImpl webgl >>= nullAsEmpty >>> return

foreign import getTexParameterImpl """
  function getTexParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getTexParameter(target, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas | eff) a)

getTexParameter :: forall eff a. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe a)
getTexParameter webgl target pname = runFn3 getTexParameterImpl webgl target pname >>= toMaybe >>> return

foreign import getUniformImpl """
  function getUniformImpl(webgl, program, location) {
    return function () {
      return webgl.getUniform(program, location);
    };
  }
""" :: forall eff a. Fn3 WebGLContext WebGLProgram WebGLUniformLocation (Eff (canvas :: Canvas | eff) a)

getUniform :: forall eff a. WebGLContext -> WebGLProgram -> WebGLUniformLocation -> Eff (canvas :: Canvas | eff) (Maybe a)
getUniform webgl program location = runFn3 getUniformImpl webgl program location >>= toMaybe >>> return

foreign import getUniformLocationImpl """
  function getUniformLocationImpl(webgl, program, name) {
    return function () {
      return webgl.getUniformLocation(program, name);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram DOMString (Eff (canvas :: Canvas | eff) WebGLUniformLocation)

getUniformLocation :: forall eff. WebGLContext -> WebGLProgram -> DOMString -> Eff (canvas :: Canvas | eff) (Maybe WebGLUniformLocation)
getUniformLocation webgl program name = runFn3 getUniformLocationImpl webgl program name >>= toMaybe >>> return

foreign import getVertexAttribImpl """
  function getVertexAttribImpl(webgl, index, pname) {
    return function () {
      return webgl.getVertexAttrib(index, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext GLuint GLenum (Eff (canvas :: Canvas | eff) a)

getVertexAttrib :: forall eff a. WebGLContext -> GLuint -> GLenum -> Eff (canvas :: Canvas | eff) (Maybe a)
getVertexAttrib webgl index pname = runFn3 getVertexAttribImpl webgl index pname >>= toMaybe >>> return

foreign import getVertexAttribOffsetImpl """
  function getVertexAttribOffsetImpl(webgl, index, pname) {
    return function () {
      return webgl.getVertexAttribOffset(index, pname);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint GLenum (Eff (canvas :: Canvas | eff) GLsizeiptr)

getVertexAttribOffset :: forall eff. WebGLContext -> GLuint -> GLenum -> Eff (canvas :: Canvas | eff) GLsizeiptr
getVertexAttribOffset webgl index pname = runFn3 getVertexAttribOffsetImpl webgl index pname

foreign import hintImpl """
  function hintImpl(webgl, target, mode) {
    return function () {
      return webgl.hint(target, mode);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas | eff) Unit)

hint :: forall eff. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) Unit
hint webgl target mode = runFn3 hintImpl webgl target mode

foreign import isBufferImpl """
  function isBufferImpl(webgl, buffer) {
    return function () {
      return webgl.isBuffer(buffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLBuffer (Eff (canvas :: Canvas | eff) GLboolean)

isBuffer :: forall eff. WebGLContext -> WebGLBuffer -> Eff (canvas :: Canvas | eff) GLboolean
isBuffer webgl buffer = runFn2 isBufferImpl webgl buffer

foreign import isContextLostImpl """
  function isContextLostImpl(webgl) {
    return function () {
      return webgl.isContextLost();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (canvas :: Canvas | eff) Boolean)

isContextLost :: forall eff. WebGLContext -> Eff (canvas :: Canvas | eff) Boolean
isContextLost webgl = runFn1 isContextLostImpl webgl

foreign import isEnabledImpl """
  function isEnabledImpl(webgl, cap) {
    return function () {
      return webgl.isEnabled(cap);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas | eff) GLboolean)

isEnabled :: forall eff. WebGLContext -> GLenum -> Eff (canvas :: Canvas | eff) GLboolean
isEnabled webgl cap = runFn2 isEnabledImpl webgl cap

foreign import isFramebufferImpl """
  function isFramebufferImpl(webgl, framebuffer) {
    return function () {
      return webgl.isFramebuffer(framebuffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLFramebuffer (Eff (canvas :: Canvas | eff) GLboolean)

isFramebuffer :: forall eff. WebGLContext -> WebGLFramebuffer -> Eff (canvas :: Canvas | eff) GLboolean
isFramebuffer webgl framebuffer = runFn2 isFramebufferImpl webgl framebuffer

foreign import isProgramImpl """
  function isProgramImpl(webgl, program) {
    return function () {
      return webgl.isProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas | eff) GLboolean)

isProgram :: forall eff. WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas | eff) GLboolean
isProgram webgl program = runFn2 isProgramImpl webgl program

foreign import isRenderbufferImpl """
  function isRenderbufferImpl(webgl, renderbuffer) {
    return function () {
      return webgl.isRenderbuffer(renderbuffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLRenderbuffer (Eff (canvas :: Canvas | eff) GLboolean)

isRenderbuffer :: forall eff. WebGLContext -> WebGLRenderbuffer -> Eff (canvas :: Canvas | eff) GLboolean
isRenderbuffer webgl renderbuffer = runFn2 isRenderbufferImpl webgl renderbuffer

foreign import isShaderImpl """
  function isShaderImpl(webgl, shader) {
    return function () {
      return webgl.isShader(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas | eff) GLboolean)

isShader :: forall eff. WebGLContext -> WebGLShader -> Eff (canvas :: Canvas | eff) GLboolean
isShader webgl shader = runFn2 isShaderImpl webgl shader

foreign import isTextureImpl """
  function isTextureImpl(webgl, texture) {
    return function () {
      return webgl.isTexture(texture);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLTexture (Eff (canvas :: Canvas | eff) GLboolean)

isTexture :: forall eff. WebGLContext -> WebGLTexture -> Eff (canvas :: Canvas | eff) GLboolean
isTexture webgl texture = runFn2 isTextureImpl webgl texture

foreign import lineWidthImpl """
  function lineWidthImpl(webgl, width) {
    return function () {
      return webgl.lineWidth(width);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLfloat (Eff (canvas :: Canvas | eff) Unit)

lineWidth :: forall eff. WebGLContext -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
lineWidth webgl width = runFn2 lineWidthImpl webgl width

foreign import linkProgramImpl """
  function linkProgramImpl(webgl, program) {
    return function () {
      return webgl.linkProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas | eff) Unit)

linkProgram :: forall eff. WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas | eff) Unit
linkProgram webgl program = runFn2 linkProgramImpl webgl program

foreign import pixelStoreiImpl """
  function pixelStoreiImpl(webgl, pname, param) {
    return function () {
      return webgl.pixelStorei(pname, param);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLint (Eff (canvas :: Canvas | eff) Unit)

pixelStorei :: forall eff. WebGLContext -> GLenum -> GLint -> Eff (canvas :: Canvas | eff) Unit
pixelStorei webgl pname param = runFn3 pixelStoreiImpl webgl pname param

foreign import polygonOffsetImpl """
  function polygonOffsetImpl(webgl, factor, units) {
    return function () {
      return webgl.polygonOffset(factor, units);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLfloat GLfloat (Eff (canvas :: Canvas | eff) Unit)

polygonOffset :: forall eff. WebGLContext -> GLfloat -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
polygonOffset webgl factor units = runFn3 polygonOffsetImpl webgl factor units

foreign import readPixelsImpl """
  function readPixelsImpl(webgl, x, y, width, height, format, type, pixels) {
    return function () {
      return webgl.readPixels(x, y, width, height, format, type, pixels);
    };
  }
""" :: forall eff. Fn8 WebGLContext GLint GLint GLsizei GLsizei GLenum GLenum ArrayBufferView (Eff (canvas :: Canvas | eff) Unit)

readPixels :: forall eff. WebGLContext -> GLint -> GLint -> GLsizei -> GLsizei -> GLenum -> GLenum -> ArrayBufferView -> Eff (canvas :: Canvas | eff) Unit
readPixels webgl x y width height format type' pixels = runFn8 readPixelsImpl webgl x y width height format type' pixels

foreign import renderbufferStorageImpl """
  function renderbufferStorageImpl(webgl, target, internalformat, width, height) {
    return function () {
      return webgl.renderbufferStorage(target, internalformat, width, height);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLsizei GLsizei (Eff (canvas :: Canvas | eff) Unit)

renderbufferStorage :: forall eff. WebGLContext -> GLenum -> GLenum -> GLsizei -> GLsizei -> Eff (canvas :: Canvas | eff) Unit
renderbufferStorage webgl target internalformat width height = runFn5 renderbufferStorageImpl webgl target internalformat width height

foreign import sampleCoverageImpl """
  function sampleCoverageImpl(webgl, value, invert) {
    return function () {
      return webgl.sampleCoverage(value, invert);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLclampf GLboolean (Eff (canvas :: Canvas | eff) Unit)

sampleCoverage :: forall eff. WebGLContext -> GLclampf -> GLboolean -> Eff (canvas :: Canvas | eff) Unit
sampleCoverage webgl value invert = runFn3 sampleCoverageImpl webgl value invert

foreign import scissorImpl """
  function scissorImpl(webgl, x, y, width, height) {
    return function () {
      return webgl.scissor(x, y, width, height);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLint GLint GLsizei GLsizei (Eff (canvas :: Canvas | eff) Unit)

scissor :: forall eff. WebGLContext -> GLint -> GLint -> GLsizei -> GLsizei -> Eff (canvas :: Canvas | eff) Unit
scissor webgl x y width height = runFn5 scissorImpl webgl x y width height

foreign import shaderSourceImpl """
  function shaderSourceImpl(webgl, shader, source) {
    return function () {
      return webgl.shaderSource(shader, source);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLShader DOMString (Eff (canvas :: Canvas | eff) Unit)

shaderSource :: forall eff. WebGLContext -> WebGLShader -> DOMString -> Eff (canvas :: Canvas | eff) Unit
shaderSource webgl shader source = runFn3 shaderSourceImpl webgl shader source

foreign import stencilFuncImpl """
  function stencilFuncImpl(webgl, func, ref, mask) {
    return function () {
      return webgl.stencilFunc(func, ref, mask);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLint GLuint (Eff (canvas :: Canvas | eff) Unit)

stencilFunc :: forall eff. WebGLContext -> GLenum -> GLint -> GLuint -> Eff (canvas :: Canvas | eff) Unit
stencilFunc webgl func ref mask = runFn4 stencilFuncImpl webgl func ref mask

foreign import stencilFuncSeparateImpl """
  function stencilFuncSeparateImpl(webgl, face, func, ref, mask) {
    return function () {
      return webgl.stencilFuncSeparate(face, func, ref, mask);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLint GLuint (Eff (canvas :: Canvas | eff) Unit)

stencilFuncSeparate :: forall eff. WebGLContext -> GLenum -> GLenum -> GLint -> GLuint -> Eff (canvas :: Canvas | eff) Unit
stencilFuncSeparate webgl face func ref mask = runFn5 stencilFuncSeparateImpl webgl face func ref mask

foreign import stencilMaskImpl """
  function stencilMaskImpl(webgl, mask) {
    return function () {
      return webgl.stencilMask(mask);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLuint (Eff (canvas :: Canvas | eff) Unit)

stencilMask :: forall eff. WebGLContext -> GLuint -> Eff (canvas :: Canvas | eff) Unit
stencilMask webgl mask = runFn2 stencilMaskImpl webgl mask

foreign import stencilMaskSeparateImpl """
  function stencilMaskSeparateImpl(webgl, face, mask) {
    return function () {
      return webgl.stencilMaskSeparate(face, mask);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLuint (Eff (canvas :: Canvas | eff) Unit)

stencilMaskSeparate :: forall eff. WebGLContext -> GLenum -> GLuint -> Eff (canvas :: Canvas | eff) Unit
stencilMaskSeparate webgl face mask = runFn3 stencilMaskSeparateImpl webgl face mask

foreign import stencilOpImpl """
  function stencilOpImpl(webgl, fail, zfail, zpass) {
    return function () {
      return webgl.stencilOp(fail, zfail, zpass);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLenum GLenum (Eff (canvas :: Canvas | eff) Unit)

stencilOp :: forall eff. WebGLContext -> GLenum -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) Unit
stencilOp webgl fail zfail zpass = runFn4 stencilOpImpl webgl fail zfail zpass

foreign import stencilOpSeparateImpl """
  function stencilOpSeparateImpl(webgl, face, fail, zfail, zpass) {
    return function () {
      return webgl.stencilOpSeparate(face, fail, zfail, zpass);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLenum GLenum (Eff (canvas :: Canvas | eff) Unit)

stencilOpSeparate :: forall eff. WebGLContext -> GLenum -> GLenum -> GLenum -> GLenum -> Eff (canvas :: Canvas | eff) Unit
stencilOpSeparate webgl face fail zfail zpass = runFn5 stencilOpSeparateImpl webgl face fail zfail zpass

foreign import texImage2DImpl """
  function texImage2DImpl(webgl, target, level, internalformat, format, type, source) {
    return function () {
      return webgl.texImage2D(target, level, internalformat, format, type, source);
    };
  }
""" :: forall eff. Fn7 WebGLContext GLenum GLint GLenum GLenum GLenum TexImageSource (Eff (canvas :: Canvas | eff) Unit)

texImage2D :: forall eff. WebGLContext -> GLenum -> GLint -> GLenum -> GLenum -> GLenum -> TexImageSource -> Eff (canvas :: Canvas | eff) Unit
texImage2D webgl target level internalformat format type' source = runFn7 texImage2DImpl webgl target level internalformat format type' source

foreign import texImage2D_Impl """
  function texImage2D_Impl(webgl, target, level, internalformat, width, height, border, format, type, pixels) {
    return function () {
      return webgl.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    };
  }
""" :: forall eff. Fn10 WebGLContext GLenum GLint GLenum GLsizei GLsizei GLint GLenum GLenum ArrayBufferView (Eff (canvas :: Canvas | eff) Unit)

texImage2D_ :: forall eff. WebGLContext -> GLenum -> GLint -> GLenum -> GLsizei -> GLsizei -> GLint -> GLenum -> GLenum -> ArrayBufferView -> Eff (canvas :: Canvas | eff) Unit
texImage2D_ webgl target level internalformat width height border format type' pixels = runFn10 texImage2D_Impl webgl target level internalformat width height border format type' pixels

foreign import texParameterfImpl """
  function texParameterfImpl(webgl, target, pname, param) {
    return function () {
      return webgl.texParameterf(target, pname, param);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLenum GLfloat (Eff (canvas :: Canvas | eff) Unit)

texParameterf :: forall eff. WebGLContext -> GLenum -> GLenum -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
texParameterf webgl target pname param = runFn4 texParameterfImpl webgl target pname param

foreign import texParameteriImpl """
  function texParameteriImpl(webgl, target, pname, param) {
    return function () {
      return webgl.texParameteri(target, pname, param);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLenum GLint (Eff (canvas :: Canvas | eff) Unit)

texParameteri :: forall eff. WebGLContext -> GLenum -> GLenum -> GLint -> Eff (canvas :: Canvas | eff) Unit
texParameteri webgl target pname param = runFn4 texParameteriImpl webgl target pname param

foreign import texSubImage2DImpl """
  function texSubImage2DImpl(webgl, target, level, xoffset, yoffset, format, type, source) {
    return function () {
      return webgl.texSubImage2D(target, level, xoffset, yoffset, format, type, source);
    };
  }
""" :: forall eff. Fn8 WebGLContext GLenum GLint GLint GLint GLenum GLenum TexImageSource (Eff (canvas :: Canvas | eff) Unit)

texSubImage2D :: forall eff. WebGLContext -> GLenum -> GLint -> GLint -> GLint -> GLenum -> GLenum -> TexImageSource -> Eff (canvas :: Canvas | eff) Unit
texSubImage2D webgl target level xoffset yoffset format type' source = runFn8 texSubImage2DImpl webgl target level xoffset yoffset format type' source

foreign import texSubImage2D_Impl """
  function texSubImage2D_Impl(webgl, target, level, xoffset, yoffset, width, height, format, type, pixels) {
    return function () {
      return webgl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    };
  }
""" :: forall eff. Fn10 WebGLContext GLenum GLint GLint GLint GLsizei GLsizei GLenum GLenum ArrayBufferView (Eff (canvas :: Canvas | eff) Unit)

texSubImage2D_ :: forall eff. WebGLContext -> GLenum -> GLint -> GLint -> GLint -> GLsizei -> GLsizei -> GLenum -> GLenum -> ArrayBufferView -> Eff (canvas :: Canvas | eff) Unit
texSubImage2D_ webgl target level xoffset yoffset width height format type' pixels = runFn10 texSubImage2D_Impl webgl target level xoffset yoffset width height format type' pixels

foreign import uniform1fImpl """
  function uniform1fImpl(webgl, location, x) {
    return function () {
      return webgl.uniform1f(location, x);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation GLfloat (Eff (canvas :: Canvas | eff) Unit)

uniform1f :: forall eff. WebGLContext -> WebGLUniformLocation -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
uniform1f webgl location x = runFn3 uniform1fImpl webgl location x

foreign import uniform1fvImpl """
  function uniform1fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform1fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniform1fv :: forall eff. WebGLContext -> WebGLUniformLocation -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniform1fv webgl location v = runFn3 uniform1fvImpl webgl location v

foreign import uniform1fv_Impl """
  function uniform1fv_Impl(webgl, location, v) {
    return function () {
      return webgl.uniform1fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Float32Array (Eff (canvas :: Canvas | eff) Unit)

uniform1fv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
uniform1fv_ webgl location v = runFn3 uniform1fv_Impl webgl location v

foreign import uniform1iImpl """
  function uniform1iImpl(webgl, location, x) {
    return function () {
      return webgl.uniform1i(location, x);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation GLint (Eff (canvas :: Canvas | eff) Unit)

uniform1i :: forall eff. WebGLContext -> WebGLUniformLocation -> GLint -> Eff (canvas :: Canvas | eff) Unit
uniform1i webgl location x = runFn3 uniform1iImpl webgl location x

foreign import uniform1ivImpl """
  function uniform1ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform1iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniform1iv :: forall eff. WebGLContext -> WebGLUniformLocation -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniform1iv webgl location v = runFn3 uniform1ivImpl webgl location v

foreign import uniform1iv_Impl """
  function uniform1iv_Impl(webgl, location, v) {
    return function () {
      return webgl.uniform1iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (canvas :: Canvas | eff) Unit)

uniform1iv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> Int32Array -> Eff (canvas :: Canvas | eff) Unit
uniform1iv_ webgl location v = runFn3 uniform1iv_Impl webgl location v

foreign import uniform2fImpl """
  function uniform2fImpl(webgl, location, x, y) {
    return function () {
      return webgl.uniform2f(location, x, y);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLfloat GLfloat (Eff (canvas :: Canvas | eff) Unit)

uniform2f :: forall eff. WebGLContext -> WebGLUniformLocation -> GLfloat -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
uniform2f webgl location x y = runFn4 uniform2fImpl webgl location x y

foreign import uniform2fvImpl """
  function uniform2fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform2fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniform2fv :: forall eff. WebGLContext -> WebGLUniformLocation -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniform2fv webgl location v = runFn3 uniform2fvImpl webgl location v

foreign import uniform2fv_Impl """
  function uniform2fv_Impl(webgl, location, v) {
    return function () {
      return webgl.uniform2fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Float32Array (Eff (canvas :: Canvas | eff) Unit)

uniform2fv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
uniform2fv_ webgl location v = runFn3 uniform2fv_Impl webgl location v

foreign import uniform2iImpl """
  function uniform2iImpl(webgl, location, x, y) {
    return function () {
      return webgl.uniform2i(location, x, y);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLint GLint (Eff (canvas :: Canvas | eff) Unit)

uniform2i :: forall eff. WebGLContext -> WebGLUniformLocation -> GLint -> GLint -> Eff (canvas :: Canvas | eff) Unit
uniform2i webgl location x y = runFn4 uniform2iImpl webgl location x y

foreign import uniform2ivImpl """
  function uniform2ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform2iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniform2iv :: forall eff. WebGLContext -> WebGLUniformLocation -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniform2iv webgl location v = runFn3 uniform2ivImpl webgl location v

foreign import uniform2iv_Impl """
  function uniform2iv_Impl(webgl, location, v) {
    return function () {
      return webgl.uniform2iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (canvas :: Canvas | eff) Unit)

uniform2iv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> Int32Array -> Eff (canvas :: Canvas | eff) Unit
uniform2iv_ webgl location v = runFn3 uniform2iv_Impl webgl location v

foreign import uniform3fImpl """
  function uniform3fImpl(webgl, location, x, y, z) {
    return function () {
      return webgl.uniform3f(location, x, y, z);
    };
  }
""" :: forall eff. Fn5 WebGLContext WebGLUniformLocation GLfloat GLfloat GLfloat (Eff (canvas :: Canvas | eff) Unit)

uniform3f :: forall eff. WebGLContext -> WebGLUniformLocation -> GLfloat -> GLfloat -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
uniform3f webgl location x y z = runFn5 uniform3fImpl webgl location x y z

foreign import uniform3fvImpl """
  function uniform3fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform3fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniform3fv :: forall eff. WebGLContext -> WebGLUniformLocation -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniform3fv webgl location v = runFn3 uniform3fvImpl webgl location v

foreign import uniform3fv_Impl """
  function uniform3fv_Impl(webgl, location, v) {
    return function () {
      return webgl.uniform3fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Float32Array (Eff (canvas :: Canvas | eff) Unit)

uniform3fv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
uniform3fv_ webgl location v = runFn3 uniform3fv_Impl webgl location v

foreign import uniform3iImpl """
  function uniform3iImpl(webgl, location, x, y, z) {
    return function () {
      return webgl.uniform3i(location, x, y, z);
    };
  }
""" :: forall eff. Fn5 WebGLContext WebGLUniformLocation GLint GLint GLint (Eff (canvas :: Canvas | eff) Unit)

uniform3i :: forall eff. WebGLContext -> WebGLUniformLocation -> GLint -> GLint -> GLint -> Eff (canvas :: Canvas | eff) Unit
uniform3i webgl location x y z = runFn5 uniform3iImpl webgl location x y z

foreign import uniform3ivImpl """
  function uniform3ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform3iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniform3iv :: forall eff. WebGLContext -> WebGLUniformLocation -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniform3iv webgl location v = runFn3 uniform3ivImpl webgl location v

foreign import uniform3iv_Impl """
  function uniform3iv_Impl(webgl, location, v) {
    return function () {
      return webgl.uniform3iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (canvas :: Canvas | eff) Unit)

uniform3iv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> Int32Array -> Eff (canvas :: Canvas | eff) Unit
uniform3iv_ webgl location v = runFn3 uniform3iv_Impl webgl location v

foreign import uniform4fImpl """
  function uniform4fImpl(webgl, location, x, y, z, w) {
    return function () {
      return webgl.uniform4f(location, x, y, z, w);
    };
  }
""" :: forall eff. Fn6 WebGLContext WebGLUniformLocation GLfloat GLfloat GLfloat GLfloat (Eff (canvas :: Canvas | eff) Unit)

uniform4f :: forall eff. WebGLContext -> WebGLUniformLocation -> GLfloat -> GLfloat -> GLfloat -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
uniform4f webgl location x y z w = runFn6 uniform4fImpl webgl location x y z w

foreign import uniform4fvImpl """
  function uniform4fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform4fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniform4fv :: forall eff. WebGLContext -> WebGLUniformLocation -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniform4fv webgl location v = runFn3 uniform4fvImpl webgl location v

foreign import uniform4fv_Impl """
  function uniform4fv_Impl(webgl, location, v) {
    return function () {
      return webgl.uniform4fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Float32Array (Eff (canvas :: Canvas | eff) Unit)

uniform4fv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
uniform4fv_ webgl location v = runFn3 uniform4fv_Impl webgl location v

foreign import uniform4iImpl """
  function uniform4iImpl(webgl, location, x, y, z, w) {
    return function () {
      return webgl.uniform4i(location, x, y, z, w);
    };
  }
""" :: forall eff. Fn6 WebGLContext WebGLUniformLocation GLint GLint GLint GLint (Eff (canvas :: Canvas | eff) Unit)

uniform4i :: forall eff. WebGLContext -> WebGLUniformLocation -> GLint -> GLint -> GLint -> GLint -> Eff (canvas :: Canvas | eff) Unit
uniform4i webgl location x y z w = runFn6 uniform4iImpl webgl location x y z w

foreign import uniform4ivImpl """
  function uniform4ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform4iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniform4iv :: forall eff. WebGLContext -> WebGLUniformLocation -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniform4iv webgl location v = runFn3 uniform4ivImpl webgl location v

foreign import uniform4iv_Impl """
  function uniform4iv_Impl(webgl, location, v) {
    return function () {
      return webgl.uniform4iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (canvas :: Canvas | eff) Unit)

uniform4iv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> Int32Array -> Eff (canvas :: Canvas | eff) Unit
uniform4iv_ webgl location v = runFn3 uniform4iv_Impl webgl location v

foreign import uniformMatrix2fvImpl """
  function uniformMatrix2fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix2fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniformMatrix2fv :: forall eff. WebGLContext -> WebGLUniformLocation -> GLboolean -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniformMatrix2fv webgl location transpose value = runFn4 uniformMatrix2fvImpl webgl location transpose value

foreign import uniformMatrix2fv_Impl """
  function uniformMatrix2fv_Impl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix2fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean Float32Array (Eff (canvas :: Canvas | eff) Unit)

uniformMatrix2fv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> GLboolean -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
uniformMatrix2fv_ webgl location transpose value = runFn4 uniformMatrix2fv_Impl webgl location transpose value

foreign import uniformMatrix3fvImpl """
  function uniformMatrix3fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix3fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniformMatrix3fv :: forall eff. WebGLContext -> WebGLUniformLocation -> GLboolean -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniformMatrix3fv webgl location transpose value = runFn4 uniformMatrix3fvImpl webgl location transpose value

foreign import uniformMatrix3fv_Impl """
  function uniformMatrix3fv_Impl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix3fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean Float32Array (Eff (canvas :: Canvas | eff) Unit)

uniformMatrix3fv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> GLboolean -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
uniformMatrix3fv_ webgl location transpose value = runFn4 uniformMatrix3fv_Impl webgl location transpose value

foreign import uniformMatrix4fvImpl """
  function uniformMatrix4fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix4fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

uniformMatrix4fv :: forall eff. WebGLContext -> WebGLUniformLocation -> GLboolean -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
uniformMatrix4fv webgl location transpose value = runFn4 uniformMatrix4fvImpl webgl location transpose value

foreign import uniformMatrix4fv_Impl """
  function uniformMatrix4fv_Impl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix4fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean Float32Array (Eff (canvas :: Canvas | eff) Unit)

uniformMatrix4fv_ :: forall eff. WebGLContext -> WebGLUniformLocation -> GLboolean -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
uniformMatrix4fv_ webgl location transpose value = runFn4 uniformMatrix4fv_Impl webgl location transpose value

foreign import useProgramImpl """
  function useProgramImpl(webgl, program) {
    return function () {
      return webgl.useProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas | eff) Unit)

useProgram :: forall eff. WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas | eff) Unit
useProgram webgl program = runFn2 useProgramImpl webgl program

foreign import validateProgramImpl """
  function validateProgramImpl(webgl, program) {
    return function () {
      return webgl.validateProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas | eff) Unit)

validateProgram :: forall eff. WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas | eff) Unit
validateProgram webgl program = runFn2 validateProgramImpl webgl program

foreign import vertexAttrib1fImpl """
  function vertexAttrib1fImpl(webgl, indx, x) {
    return function () {
      return webgl.vertexAttrib1f(indx, x);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint GLfloat (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib1f :: forall eff. WebGLContext -> GLuint -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib1f webgl indx x = runFn3 vertexAttrib1fImpl webgl indx x

foreign import vertexAttrib1fvImpl """
  function vertexAttrib1fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib1fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib1fv :: forall eff. WebGLContext -> GLuint -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib1fv webgl indx values = runFn3 vertexAttrib1fvImpl webgl indx values

foreign import vertexAttrib1fv_Impl """
  function vertexAttrib1fv_Impl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib1fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint Float32Array (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib1fv_ :: forall eff. WebGLContext -> GLuint -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib1fv_ webgl indx values = runFn3 vertexAttrib1fv_Impl webgl indx values

foreign import vertexAttrib2fImpl """
  function vertexAttrib2fImpl(webgl, indx, x, y) {
    return function () {
      return webgl.vertexAttrib2f(indx, x, y);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLuint GLfloat GLfloat (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib2f :: forall eff. WebGLContext -> GLuint -> GLfloat -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib2f webgl indx x y = runFn4 vertexAttrib2fImpl webgl indx x y

foreign import vertexAttrib2fvImpl """
  function vertexAttrib2fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib2fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib2fv :: forall eff. WebGLContext -> GLuint -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib2fv webgl indx values = runFn3 vertexAttrib2fvImpl webgl indx values

foreign import vertexAttrib2fv_Impl """
  function vertexAttrib2fv_Impl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib2fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint Float32Array (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib2fv_ :: forall eff. WebGLContext -> GLuint -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib2fv_ webgl indx values = runFn3 vertexAttrib2fv_Impl webgl indx values

foreign import vertexAttrib3fImpl """
  function vertexAttrib3fImpl(webgl, indx, x, y, z) {
    return function () {
      return webgl.vertexAttrib3f(indx, x, y, z);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLuint GLfloat GLfloat GLfloat (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib3f :: forall eff. WebGLContext -> GLuint -> GLfloat -> GLfloat -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib3f webgl indx x y z = runFn5 vertexAttrib3fImpl webgl indx x y z

foreign import vertexAttrib3fvImpl """
  function vertexAttrib3fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib3fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib3fv :: forall eff. WebGLContext -> GLuint -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib3fv webgl indx values = runFn3 vertexAttrib3fvImpl webgl indx values

foreign import vertexAttrib3fv_Impl """
  function vertexAttrib3fv_Impl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib3fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint Float32Array (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib3fv_ :: forall eff. WebGLContext -> GLuint -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib3fv_ webgl indx values = runFn3 vertexAttrib3fv_Impl webgl indx values

foreign import vertexAttrib4fImpl """
  function vertexAttrib4fImpl(webgl, indx, x, y, z, w) {
    return function () {
      return webgl.vertexAttrib4f(indx, x, y, z, w);
    };
  }
""" :: forall eff. Fn6 WebGLContext GLuint GLfloat GLfloat GLfloat GLfloat (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib4f :: forall eff. WebGLContext -> GLuint -> GLfloat -> GLfloat -> GLfloat -> GLfloat -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib4f webgl indx x y z w = runFn6 vertexAttrib4fImpl webgl indx x y z w

foreign import vertexAttrib4fvImpl """
  function vertexAttrib4fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib4fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint [GLfloat] (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib4fv :: forall eff. WebGLContext -> GLuint -> [GLfloat] -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib4fv webgl indx values = runFn3 vertexAttrib4fvImpl webgl indx values

foreign import vertexAttrib4fv_Impl """
  function vertexAttrib4fv_Impl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib4fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint Float32Array (Eff (canvas :: Canvas | eff) Unit)

vertexAttrib4fv_ :: forall eff. WebGLContext -> GLuint -> Float32Array -> Eff (canvas :: Canvas | eff) Unit
vertexAttrib4fv_ webgl indx values = runFn3 vertexAttrib4fv_Impl webgl indx values

foreign import vertexAttribPointerImpl """
  function vertexAttribPointerImpl(webgl, indx, size, type, normalized, stride, offset) {
    return function () {
      return webgl.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    };
  }
""" :: forall eff. Fn7 WebGLContext GLuint GLint GLenum GLboolean GLsizei GLintptr (Eff (canvas :: Canvas | eff) Unit)

vertexAttribPointer :: forall eff. WebGLContext -> GLuint -> GLint -> GLenum -> GLboolean -> GLsizei -> GLintptr -> Eff (canvas :: Canvas | eff) Unit
vertexAttribPointer webgl indx size type' normalized stride offset = runFn7 vertexAttribPointerImpl webgl indx size type' normalized stride offset

foreign import viewportImpl """
  function viewportImpl(webgl, x, y, width, height) {
    return function () {
      return webgl.viewport(x, y, width, height);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLint GLint GLsizei GLsizei (Eff (canvas :: Canvas | eff) Unit)

viewport :: forall eff. WebGLContext -> GLint -> GLint -> GLsizei -> GLsizei -> Eff (canvas :: Canvas | eff) Unit
viewport webgl x y width height = runFn5 viewportImpl webgl x y width height

